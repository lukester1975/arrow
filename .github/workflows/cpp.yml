# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.

name: C++

on:
  push:
    paths:
      - ".github/workflows/cpp.yml"
      - "ci/docker/**"
      - "ci/scripts/cpp_*"
      - "ci/scripts/install_gcs_testbench.sh"
      - "ci/scripts/install_minio.sh"
      - "ci/scripts/msys2_*"
      - "ci/scripts/util_*"
      - "cpp/**"
      - "format/Flight.proto"
  pull_request:
    paths:
      - ".github/workflows/cpp.yml"
      - "ci/docker/**"
      - "ci/scripts/cpp_*"
      - "ci/scripts/install_gcs_testbench.sh"
      - "ci/scripts/install_minio.sh"
      - "ci/scripts/msys2_*"
      - "ci/scripts/util_*"
      - "cpp/**"
      - "format/Flight.proto"

concurrency:
  group: ${{ github.repository }}-${{ github.head_ref || github.sha }}-${{ github.workflow }}
  cancel-in-progress: true

permissions:
  contents: read

env:
  ARROW_ENABLE_TIMING_TESTS: OFF
  DOCKER_VOLUME_PREFIX: ".docker/"

jobs:
  windows-clang-cl:
    name: AMD64 ${{ matrix.name }} C++20
    runs-on: ${{ matrix.os }}
    if: ${{ !contains(github.event.pull_request.title, 'WIP') }}
    timeout-minutes: 60
    strategy:
      fail-fast: false
      matrix:
        os:
          - windows-2022
        include:
          - os: windows-2022
            name: Windows 2022
    env:
      ARROW_BOOST_USE_SHARED: OFF
      ARROW_BUILD_BENCHMARKS: ON
      ARROW_BUILD_SHARED: ON
      ARROW_BUILD_STATIC: OFF
      ARROW_BUILD_TESTS: ON
      ARROW_DATASET: ON
      ARROW_FLIGHT: OFF
      ARROW_HDFS: ON
      ARROW_HOME: /usr
      ARROW_JEMALLOC: OFF
      ARROW_MIMALLOC: ON
      ARROW_ORC: ON
      ARROW_PARQUET: ON
      ARROW_USE_GLOG: OFF
      ARROW_VERBOSE_THIRDPARTY_BUILD: OFF
      ARROW_WITH_BROTLI: OFF
      ARROW_WITH_BZ2: OFF
      ARROW_WITH_LZ4: OFF
      ARROW_WITH_OPENTELEMETRY: OFF
      ARROW_WITH_SNAPPY: ON
      ARROW_WITH_ZLIB: ON
      ARROW_WITH_ZSTD: ON
      BOOST_SOURCE: BUNDLED
      CMAKE_CXX_STANDARD: "20"
      CMAKE_GENERATOR: Ninja
      CMAKE_LINKER: lld-link
      CMAKE_INSTALL_LIBDIR: bin
      CMAKE_INSTALL_PREFIX: /usr
      CMAKE_UNITY_BUILD: ON
      CMAKE_ARGS: >-
        -DCMAKE_C_COMPILER=clang-cl.exe
        -DCMAKE_CXX_COMPILER=clang-cl.exe
      OPENSSL_ROOT_DIR: >-
        C:\Program Files\OpenSSL-Win64
      NPROC: 3
    steps:
      - name: Disable Crash Dialogs
        run: |
          reg add `
            "HKCU\SOFTWARE\Microsoft\Windows\Windows Error Reporting" `
            /v DontShowUI `
            /t REG_DWORD `
            /d 1 `
            /f
      - name: Installed Packages
        run: choco list -l
      - name: Install Dependencies
        run: choco install -y --no-progress openssl
      - name: Checkout Arrow
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          submodules: recursive
      - name: Download Timezone Database
        shell: bash
        run: ci/scripts/download_tz_database.sh
      - name: Install ccache
        shell: bash
        run: |
          ci/scripts/install_ccache.sh 4.6.3 /usr
      - name: Setup ccache
        shell: bash
        run: |
          ci/scripts/ccache_setup.sh
      - name: ccache info
        id: ccache-info
        shell: bash
        run: |
          echo "cache-dir=$(ccache --get-config cache_dir)" >> $GITHUB_OUTPUT
      - name: Cache ccache
        uses: actions/cache@v3
        with:
          path: ${{ steps.ccache-info.outputs.cache-dir }}
          key: cpp-ccache-windows-${{ env.CACHE_VERSION }}-${{ hashFiles('cpp/**') }}
          restore-keys: cpp-ccache-windows-${{ env.CACHE_VERSION }}-
        env:
          # We can invalidate the current cache by updating this.
          CACHE_VERSION: "2022-09-13"
      - name: Build
        shell: cmd
        run: |
          call "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Auxiliary\Build\vcvarsall.bat" x64
          bash -c "ci/scripts/cpp_build.sh $(pwd) $(pwd)/build"
      - name: Test
        shell: bash
        run: |
          # For ORC
          export TZDIR=/c/msys64/usr/share/zoneinfo
          ci/scripts/cpp_test.sh $(pwd) $(pwd)/build
